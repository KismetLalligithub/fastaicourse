dls = DataBlock(
	blocks=(ImageBlock, CategoryBlock), 
	get_items=get_image_files, 
	splitter=RandomSplitter(valid_pct=0.2, seed=42), 
	get_y=parent.label, 
	item_tfms=[Resize(192, method='squish')]
).dataLoader(path)


what does blocks=(ImageBlock, CategoryBlock) mean: 
	The first parameter is the input given to the model. 
	The second parameter is what the output could be, in a category of things. 

# Refining Data mediocre example

failed = verify_images(get_image_files(path))
failed.map(Path.unlink)
len(failed)

-> obviously get_image_files(path) returns all the images at the specified path. 
	then passed into verify_images which validates each of the images. 
	failed is a list of images that are not valid images or images at all. 
	then failed.map(Path.unlink), maps the Path.unlink function on the failed list. 

need to put aside a batch to test your own model, VERY IMPORTANT STEP

	splitter=RandomSplitter(valid_pct=0.2, seed=42)
		
		valid_pct=0.2 means that we take 20% of the training dataset and use it to test the model.
		seed=42 means that each batch has 42 elements. 

How do we know the correct label? 

	get_y=parent.label, function that returns the parent folder of the path. 

All inputs need to be of the same size: 
	item_tfms=[Resize(192, method='squish')]).dataloaders(path)
	Two ways to either crop or squish. 
	
Dataloaders is what pytorch iterates through to grab a bunch of your data. 
	Done through using the paralelization of GPUs. 

dataloader feeds the model with a batch of the data at once.
	Amazing how GPUs make this possible even at a small scale remarkable.

Now the model

Learner combines the model and the data.  

learn = vision_learner(dls, resnet18, metrics=error_rate)
	dls -> data
	resnet18 -> mode
learn.fine_tune(3)

how this is done so quickly, resnet18 in this example is a pretrained model, where the weights are available. 
	fastai gets the weights for the user and also fine tunes the weights for you, therefore learn.fine_tune(3)


is_bird,_,probs = learn.predict(PILImage.create('bird.jpg'))
print(f"This is a: {is_bird}")
print(f"Probability it's a bird: {probs[0]:.4f}")

_ -> bird or not as an integer.

Computer Vision segmentation: 
	segmentation: take photos and color every pixel. 
 
